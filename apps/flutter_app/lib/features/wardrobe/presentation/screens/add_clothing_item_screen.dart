import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:go_router/go_router.dart';
import 'package:dartz/dartz.dart';

import '../../../../core/error/failure.dart';
import '../../../../core/providers/service_providers.dart';
import '../../domain/entities/clothing_item.dart';
import '../../providers/repository_providers.dart';

class AddClothingItemScreen extends ConsumerStatefulWidget {
  const AddClothingItemScreen({super.key});

  @override
  ConsumerState<AddClothingItemScreen> createState() => _AddClothingItemScreenState();
}

class _AddClothingItemScreenState extends ConsumerState<AddClothingItemScreen> {
  final _formKey = GlobalKey<FormState>();
  File? _selectedImage;
  bool _isLoading = false;
  bool _isAiAnalyzing = false;
  Map<String, dynamic>? _aiResults;

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _brandController = TextEditingController();
  final TextEditingController _sizeController = TextEditingController();
  String _selectedCategory = 'Tops';
  String _selectedColor = 'Blue';
  String _selectedSeason = 'All Seasons';

  final List<String> _categories = ['Tops', 'Bottoms', 'Dresses', 'Outerwear', 'Footwear', 'Accessories'];
  final List<String> _colors = ['Red', 'Blue', 'Green', 'Yellow', 'Black', 'White', 'Gray', 'Pink', 'Purple', 'Orange', 'Brown', 'Beige'];
  final List<String> _seasons = ['Spring', 'Summer', 'Autumn', 'Winter', 'All Seasons'];

  @override
  void dispose() {
    _nameController.dispose();
    _brandController.dispose();
    _sizeController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 800,
      maxHeight: 800,
      imageQuality: 85,
    );
    
    if (pickedFile != null) {
      setState(() {
        _selectedImage = File(pickedFile.path);
        _isAiAnalyzing = true;
      });
      
      await _runAiAnalysis();
    }
  }

  Future<void> _runAiAnalysis() async {
    if (_selectedImage == null) return;
    
    try {
      final aiService = ref.read(aiTaggingServiceProvider);
      final results = await aiService.analyzeClothingImageFromFile(_selectedImage!);
      
      setState(() {
        _aiResults = results;
        _isAiAnalyzing = false;
        
        // Auto-fill form with AI suggestions
        if (results['category'] != null && _categories.contains(results['category'])) {
          _selectedCategory = results['category'] as String;
        }
        if (results['color'] != null && _colors.contains(results['color'])) {
          _selectedColor = results['color'] as String;
        }
        if (results['season'] != null && _seasons.contains(results['season'])) {
          _selectedSeason = results['season'] as String;
        }
      });
    } catch (e) {
      setState(() {
        _isAiAnalyzing = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('AI analysis failed: $e')),
        );
      }
    }
  }

  Future<void> _saveItem() async {
    if (!_formKey.currentState!.validate() || _selectedImage == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select an image and fill all required fields')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Upload image first
      final imageUploadService = ref.read(imageUploadServiceProvider);
      final imageUrl = await imageUploadService.uploadClothingItemImage(_selectedImage!);

      // Create clothing item
      final clothingItem = ClothingItem(
        id: '', // Will be generated by backend
        userId: '', // Will be set by backend
        name: _nameController.text.trim(),
        category: _selectedCategory,
        color: _selectedColor,
        brand: _brandController.text.trim().isEmpty ? null : _brandController.text.trim(),
        size: _sizeController.text.trim().isEmpty ? null : _sizeController.text.trim(),
        isFavorite: false,
        imageUrl: imageUrl,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Save to backend
      final repository = ref.read(wardrobeRepositoryProvider);
      final result = await repository.addClothingItem(clothingItem);
      
      result.fold(
        (Failure failure) {
          throw Exception(failure.message);
        },
        (savedItem) {
          // Success - item saved
        },
      );

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Clothing item saved successfully!')),
        );
        context.pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to save: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Clothing Item'),
        backgroundColor: Theme.of(context).colorScheme.surface,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Image picker section
              GestureDetector(
                onTap: _pickImage,
                child: Container(
                  height: 200,
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.shade300),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: _selectedImage == null
                      ? Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.add_a_photo, size: 48, color: Colors.grey.shade600),
                            const SizedBox(height: 8),
                            Text(
                              'Tap to select image',
                              style: TextStyle(color: Colors.grey.shade600),
                            ),
                          ],
                        )
                      : ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.file(
                            _selectedImage!,
                            height: 200,
                            width: double.infinity,
                            fit: BoxFit.cover,
                          ),
                        ),
                ),
              ),
              const SizedBox(height: 16),

              // AI Analysis Results
              if (_isAiAnalyzing)
                Card(
                  color: Colors.blue.shade50,
                  child: const Padding(
                    padding: EdgeInsets.all(16),
                    child: Row(
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                        SizedBox(width: 12),
                        Text('AI is analyzing your image...'),
                      ],
                    ),
                  ),
                ),

              if (_aiResults != null && !_isAiAnalyzing)
                Card(
                  color: Colors.green.shade50,
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('âœ¨ AI Analysis Results:', style: TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 8),
                        if (_aiResults!['category'] != null)
                          Text('Category: ${_aiResults!['category']}'),
                        if (_aiResults!['color'] != null)
                          Text('Color: ${_aiResults!['color']}'),
                        if (_aiResults!['material'] != null)
                          Text('Material: ${_aiResults!['material']}'),
                        if (_aiResults!['season'] != null)
                          Text('Season: ${_aiResults!['season']}'),
                        Text('Confidence: ${((_aiResults!['confidence'] ?? 0.0) * 100).toStringAsFixed(1)}%'),
                      ],
                    ),
                  ),
                ),

              const SizedBox(height: 16),

              // Form fields
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Item Name *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter an item name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              Row(
                children: [
                  Expanded(
                    child: DropdownButtonFormField<String>(
                      value: _selectedCategory,
                      decoration: const InputDecoration(
                        labelText: 'Category',
                        border: OutlineInputBorder(),
                      ),
                      items: _categories.map((category) => DropdownMenuItem(
                        value: category,
                        child: Text(category),
                      )).toList(),
                      onChanged: (value) {
                        setState(() {
                          _selectedCategory = value!;
                        });
                      },
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: DropdownButtonFormField<String>(
                      value: _selectedColor,
                      decoration: const InputDecoration(
                        labelText: 'Color',
                        border: OutlineInputBorder(),
                      ),
                      items: _colors.map((color) => DropdownMenuItem(
                        value: color,
                        child: Text(color),
                      )).toList(),
                      onChanged: (value) {
                        setState(() {
                          _selectedColor = value!;
                        });
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _brandController,
                      decoration: const InputDecoration(
                        labelText: 'Brand (Optional)',
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextFormField(
                      controller: _sizeController,
                      decoration: const InputDecoration(
                        labelText: 'Size (Optional)',
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              DropdownButtonFormField<String>(
                value: _selectedSeason,
                decoration: const InputDecoration(
                  labelText: 'Season',
                  border: OutlineInputBorder(),
                ),
                items: _seasons.map((season) => DropdownMenuItem(
                  value: season,
                  child: Text(season),
                )).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedSeason = value!;
                  });
                },
              ),
              const SizedBox(height: 24),

              ElevatedButton(
                onPressed: _isLoading ? null : _saveItem,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: Theme.of(context).colorScheme.primary,
                  foregroundColor: Theme.of(context).colorScheme.onPrimary,
                ),
                child: _isLoading
                    ? const SizedBox(
                        height: 20,
                        width: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Text('Save Clothing Item', style: TextStyle(fontSize: 16)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
